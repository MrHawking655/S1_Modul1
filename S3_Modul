#include <iostream>
using namespace std;

#define MAX_STACK 5

struct Stack {
    int elemen[MAX_STACK];
    int top;
};

void createStack(Stack &stack) {
    stack.top = -1;
}

bool isEmpty(Stack stack) {
    return stack.top == -1;
}

bool isFull(Stack stack) {
    return stack.top == MAX_STACK - 1;
}

void push(Stack &stack, int i) {
    if (isFull(stack)) {
        cout << "Stack penuh!" << endl;
    } else {
        stack.top++;
        stack.elemen[stack.top] = i;
        cout << "Data " << i << " berhasil ditambahkan ke stack." << endl;
    }
}

void pop(Stack &stack, int &i) {
    if (isEmpty(stack)) {
        cout << "Stack kosong!" << endl;
    } else {
        i = stack.elemen[stack.top];
        stack.top--;
        cout << "Data " << i << " berhasil diambil dari stack." << endl;
    }
}

void displayStack(Stack stack) {
    if (isEmpty(stack)) {
        cout << "Stack kosong!" << endl;
    } else {
        cout << "Isi stack: ";
        for (int i = 0; i <= stack.top; i++) {
            cout << stack.elemen[i] << " ";
        }
        cout << endl;
    }
}

int main() {
    Stack stack;
    createStack(stack);

    int choice, data;
    do {
        cout << "\nImplementasi Stack dengan Array" << endl;
        cout << "=============================" << endl;
        cout << "1. Push Data" << endl;
        cout << "2. Pop Data" << endl;
        cout << "3. Tampil Isi Stack" << endl;
        cout << "4. Keluar" << endl;
        cout << "Masukkan pilihan [1..4]: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Masukkan data: ";
            cin >> data;
            push(stack, data);
            break;
        case 2:
            pop(stack, data);
            break;
        case 3:
            displayStack(stack);
            break;
        case 4:
            cout << "Keluar program." << endl;
            break;
        default:
            cout << "Pilihan tidak valid." << endl;
        }

    } while (choice != 4);

    return 0;
}
